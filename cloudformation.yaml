AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI-Powered Infrastructure Monitor - Serverless Setup'

Parameters:
  OpenAIAPIKey:
    Type: String
    Description: OpenAI API Key for AI analysis
    NoEcho: true
    Default: ""
  
  NotificationEmail:
    Type: String
    Description: Email for alert notifications
    Default: your-email@example.com

Resources:
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ai-infra-monitor-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:FilterLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref AlertTopic

  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ai-infra-monitor-alerts
      DisplayName: AI Infrastructure Monitor Alerts
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  # Lambda Function
  InfraMonitorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ai-infra-monitor
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIAPIKey
          SNS_TOPIC_ARN: !Ref AlertTopic
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Hello from Lambda!')}

  # EventBridge Rule to trigger Lambda every 15 minutes
  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ai-infra-monitor-schedule
      Description: Trigger AI infrastructure monitor every 15 minutes
      ScheduleExpression: rate(15 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt InfraMonitorFunction.Arn
          Id: InfraMonitorTarget

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InfraMonitorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt InfraMonitorFunction.Arn

  SNSTopicArn:
    Description: ARN of the SNS topic for alerts
    Value: !Ref AlertTopic

  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards
